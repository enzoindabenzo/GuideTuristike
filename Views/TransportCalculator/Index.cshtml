@using DK1.Models.Cal
@using CalTransportType = DK1.Models.Cal.TransportType
@using Newtonsoft.Json
@model TransportCalculatorViewModel


@{
    ViewBag.Title = "Llogaritësi i Kostos së Transportit Shqiptar";
}

<style>
    #originMap, #destinationMap {
        visibility: hidden;
        height: 0;
    }

    :root {
        /* Modern Color Palette */
        --primary: #8b5cf6;
        --primary-dark: #7c3aed;
        --primary-light: #a78bfa;
        --primary-lighter: #f3f4f6;
        --secondary: #f59e0b;
        --accent: #06b6d4;
        --success: #10b981;
        --info: #3b82f6;
        --warning: #f59e0b;
        --danger: #ef4444;
        /* Background Gradients */
        --light-bg: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        --dark-bg: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
        /* Card Backgrounds */
        --light-card-bg: rgba(255, 255, 255, 0.95);
        --dark-card-bg: rgba(17, 24, 39, 0.95);
        /* Text Colors */
        --text-light: #f8fafc;
        --text-dark: #111827;
        --text-muted-light: #6b7280;
        --text-muted-dark: #9ca3af;
        /* Border Colors */
        --border-light: #e5e7eb;
        --border-dark: #374151;
        /* Glass Effects */
        --glassmorphism-light: rgba(255, 255, 255, 0.25);
        --glassmorphism-dark: rgba(255, 255, 255, 0.08);
        /* Shadows */
        --shadow-light: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        --shadow-dark: 0 25px 50px -12px rgba(0, 0, 0, 0.6);
        --shadow-colored: 0 25px 50px -12px rgba(139, 92, 246, 0.3);
    }

    [data-bs-theme="light"] {
        --body-bg: linear-gradient(135deg, #f3f4f6 0%, #e5e7eb 50%, #d1d5db 100%);
        --card-bg: var(--light-card-bg);
        --text-color: var(--text-dark);
        --text-muted: var(--text-muted-light);
        --border-color: var(--border-light);
        --btn-bg: var(--primary);
        --btn-hover: var(--primary-dark);
        --form-bg: rgba(255, 255, 255, 0.9);
        --selected-bg: rgba(139, 92, 246, 0.1);
        --selected-color: var(--primary-dark);
        --glassmorphism: var(--glassmorphism-light);
        --shadow: var(--shadow-light);
    }

    [data-bs-theme="dark"] {
        --body-bg: linear-gradient(135deg, #0f0f23 0%, #1a1a2e 50%, #16213e 100%);
        --card-bg: var(--dark-card-bg);
        --text-color: var(--text-light);
        --text-muted: var(--text-muted-dark);
        --border-color: var(--border-dark);
        --btn-bg: var(--primary-light);
        --btn-hover: var(--primary);
        --form-bg: rgba(17, 24, 39, 0.9);
        --selected-bg: rgba(139, 92, 246, 0.15);
        --selected-color: var(--text-light);
        --glassmorphism: var(--glassmorphism-dark);
        --shadow: var(--shadow-dark);
    }

    * {
        box-sizing: border-box;
    }

    body {
        background: var(--body-bg);
        background-attachment: fixed;
        color: var(--text-color);
        font-family: 'Inter', 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        margin: 0;
        padding: 0;
        padding-top: 70px;
        min-height: 100vh;
        position: relative;
        font-weight: 400;
        line-height: 1.6;
    }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: radial-gradient(circle at 20% 80%, rgba(139, 92, 246, 0.15) 0%, transparent 50%), radial-gradient(circle at 80% 20%, rgba(59, 130, 246, 0.12) 0%, transparent 50%), radial-gradient(circle at 40% 40%, rgba(16, 185, 129, 0.08) 0%, transparent 50%);
            pointer-events: none;
            z-index: -1;
            animation: float 25s ease-in-out infinite;
        }

    @@keyframes float {
        0%, 100% {
            transform: translateY(0px) rotate(0deg);
        }

        25% {
            transform: translateY(-15px) rotate(0.5deg);
        }

        50% {
            transform: translateY(10px) rotate(-0.5deg);
        }

        75% {
            transform: translateY(-5px) rotate(0.2deg);
        }
    }

    .page-container {
        max-width: 1000px;
        margin: 3rem auto 4rem;
        padding: 0 2rem;
        position: relative;
        z-index: 1;
    }

    #themeToggleContainer {
        background: var(--glassmorphism);
        backdrop-filter: blur(24px);
        border: 1px solid rgba(255, 255, 255, 0.1);
        border-radius: 24px;
        padding: 1rem 1.5rem;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 2rem;
        box-shadow: var(--shadow);
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        position: fixed;
        top: 60px;
        right: 0;
        left: 0;
        z-index: 1000;
        transform: translateY(0);
    }

    #themeToggle {
        cursor: pointer;
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
        border: none;
        border-radius: 50px;
        color: white;
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        font-size: 1rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 10px 25px rgba(139, 92, 246, 0.3);
        position: relative;
        overflow: hidden;
    }

        #themeToggle::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        #themeToggle:hover::before {
            left: 100%;
        }

        #themeToggle:hover {
            transform: translateY(-3px) scale(1.05);
            box-shadow: 0 15px 35px rgba(139, 92, 246, 0.4);
        }

        #themeToggle i {
            font-size: 1.2rem;
            transition: transform 0.3s ease;
        }

        #themeToggle:hover i {
            transform: rotate(180deg);
        }

    .main-content {
        padding-top: 0px;
    }

    .card {
        background: var(--glassmorphism);
        backdrop-filter: blur(24px);
        border-radius: 32px;
        box-shadow: var(--shadow);
        transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        border: 1px solid rgba(255, 255, 255, 0.08);
        overflow: hidden;
        margin-bottom: 3rem;
        position: relative;
        transform: translateY(0);
    }

        .card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, var(--primary), var(--accent), var(--success), var(--info));
            animation: shimmer 4s ease-in-out infinite;
        }

    @@keyframes shimmer {
        0% {
            transform: translateX(-100%);
        }

        100% {
            transform: translateX(100%);
        }
    }

    .card:hover {
        transform: translateY(-12px) scale(1.02);
        box-shadow: var(--shadow-colored);
        border-color: rgba(139, 92, 246, 0.2);
    }

    .card-header {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        color: white;
        font-size: 1.5rem;
        padding: 2.5rem 3rem;
        font-weight: 700;
        border-radius: 32px 32px 0 0;
        display: flex;
        align-items: center;
        gap: 1rem;
        position: relative;
        overflow: hidden;
        letter-spacing: -0.025em;
    }

        .card-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
            animation: shine 4s ease-in-out infinite;
        }

    @@keyframes shine {
        0% {
            transform: translateX(-100%) translateY(-100%) rotate(45deg);
        }

        100% {
            transform: translateX(100%) translateY(100%) rotate(45deg);
        }
    }

    .card-header i {
        font-size: 1.8rem;
        filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));
    }

    .card-body {
        padding: 3.5rem;
        color: var(--text-color);
        position: relative;
    }

    label.form-label {
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 0.75rem;
        user-select: none;
        font-size: 1.1rem;
        letter-spacing: -0.01em;
    }

    .form-floating {
        position: relative;
        margin-bottom: 2rem;
    }

    .form-select, .form-control {
        background: var(--form-bg);
        backdrop-filter: blur(12px);
        color: var(--text-color);
        border: 2px solid rgba(139, 92, 246, 0.1);
        border-radius: 20px;
        padding: 1.25rem 1.75rem;
        font-size: 1.1rem;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        position: relative;
        z-index: 1;
        font-weight: 500;
    }

        .form-select:focus, .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 4px rgba(139, 92, 246, 0.1), 0 8px 25px rgba(139, 92, 246, 0.2);
            transform: translateY(-2px);
        }

    .form-floating > label {
        background: transparent;
        color: var(--text-muted);
        font-weight: 500;
        padding: 0 0.5rem;
    }

    .btn-outline-primary, .btn-outline-success, .btn-outline-info {
        border-radius: 24px;
        padding: 2.5rem 1.5rem;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        user-select: none;
        cursor: pointer;
        margin-bottom: 1rem;
        border: 2px solid;
        background: var(--glassmorphism);
        backdrop-filter: blur(12px);
        position: relative;
        overflow: hidden;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.06);
        letter-spacing: -0.01em;
    }

    .btn-outline-primary {
        border-color: var(--primary);
        color: var(--primary);
    }

    .btn-outline-success {
        border-color: var(--success);
        color: var(--success);
    }

    .btn-outline-info {
        border-color: var(--info);
        color: var(--info);
    }

        .btn-outline-primary::before,
        .btn-outline-success::before,
        .btn-outline-info::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }

        .btn-outline-primary:hover::before,
        .btn-outline-success:hover::before,
        .btn-outline-info:hover::before {
            transform: translateX(100%);
        }

    .btn-outline-primary:hover {
        transform: translateY(-8px) scale(1.05);
        box-shadow: 0 20px 40px rgba(139, 92, 246, 0.3);
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
        color: white !important;
        border-color: var(--primary);
    }

    .btn-outline-success:hover {
        transform: translateY(-8px) scale(1.05);
        box-shadow: 0 20px 40px rgba(16, 185, 129, 0.3);
        background: linear-gradient(135deg, var(--success) 0%, #34d399 100%);
        color: white !important;
        border-color: var(--success);
    }

    .btn-outline-info:hover {
        transform: translateY(-8px) scale(1.05);
        box-shadow: 0 20px 40px rgba(59, 130, 246, 0.3);
        background: linear-gradient(135deg, var(--info) 0%, #60a5fa 100%);
        color: white !important;
        border-color: var(--info);
    }

    .btn-check:checked + label.btn-outline-primary {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
        color: white;
        border-color: var(--primary);
        transform: scale(1.05);
        box-shadow: 0 15px 35px rgba(139, 92, 246, 0.4);
    }

    .btn-check:checked + label.btn-outline-success {
        background: linear-gradient(135deg, var(--success) 0%, #34d399 100%);
        color: white;
        border-color: var(--success);
        transform: scale(1.05);
        box-shadow: 0 15px 35px rgba(16, 185, 129, 0.4);
    }

    .btn-check:checked + label.btn-outline-info {
        background: linear-gradient(135deg, var(--info) 0%, #60a5fa 100%);
        color: white;
        border-color: var(--info);
        transform: scale(1.05);
        box-shadow: 0 15px 35px rgba(59, 130, 246, 0.4);
    }

    .btn-check {
        position: absolute;
        clip: rect(0, 0, 0, 0);
        pointer-events: none;
    }

    #validation-summary {
        margin-bottom: 2rem;
        font-weight: 600;
        color: var(--danger);
        user-select: none;
        font-size: 1rem;
        padding: 1.5rem;
        background: rgba(239, 68, 68, 0.08);
        border-radius: 20px;
        border-left: 4px solid var(--danger);
        backdrop-filter: blur(12px);
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-light) 100%);
        border: none;
        color: white;
        font-weight: 700;
        border-radius: 50px;
        padding: 1.25rem 3rem;
        font-size: 1.2rem;
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 10px 25px rgba(139, 92, 246, 0.3);
        position: relative;
        overflow: hidden;
        letter-spacing: -0.025em;
    }

        .btn-primary::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn-primary:hover::before {
            left: 100%;
        }

        .btn-primary:hover {
            transform: translateY(-4px) scale(1.05);
            box-shadow: 0 20px 40px rgba(139, 92, 246, 0.4);
            background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary) 100%);
        }

    #calculationResults .card-header {
        background: linear-gradient(135deg, var(--success) 0%, #34d399 100%);
        border-radius: 32px 32px 0 0;
        font-weight: 700;
        font-size: 1.4rem;
    }

    #results-container {
        padding: 3.5rem;
        color: var(--text-color);
    }

        #results-container h5 {
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: var(--text-color);
            font-size: 1.2rem;
            letter-spacing: -0.01em;
        }

        #results-container p {
            margin: 0;
            color: var(--text-muted);
            font-weight: 500;
            font-size: 1.1rem;
        }

        #results-container h4 {
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 800;
            font-size: 1.8rem;
            margin-bottom: 1rem;
            letter-spacing: -0.025em;
        }

        #results-container .fs-3 {
            background: linear-gradient(135deg, var(--success) 0%, var(--info) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            font-weight: 900;
            font-size: 2.5rem !important;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            letter-spacing: -0.025em;
        }

    .map-container {
        margin-top: 15px;
        margin-bottom: 25px;
        border-radius: 24px;
        overflow: hidden;
        border: 2px solid rgba(139, 92, 246, 0.1);
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.08);
        backdrop-filter: blur(12px);
        transition: all 0.4s ease;
    }

        .map-container:hover {
            transform: scale(1.02);
            box-shadow: 0 20px 40px rgba(139, 92, 246, 0.15);
            border-color: rgba(139, 92, 246, 0.2);
        }

    .text-center.py-5 {
        background: var(--glassmorphism);
        border-radius: 24px;
        padding: 3.5rem !important;
        margin: 1rem;
        backdrop-filter: blur(12px);
    }

        .text-center.py-5 i {
            background: linear-gradient(135deg, var(--primary) 0%, var(--accent) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: pulse 2s ease-in-out infinite;
        }

    @@keyframes pulse {
        0%, 100% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }
    }

    .row {
        margin-bottom: 1.5rem;
    }

    .col-md-6 {
        margin-bottom: 1.5rem;
    }

    @@media (max-width: 767px) {
        .page-container {
            margin: 2rem auto 3rem;
            padding: 0 1rem;
            max-width: 95vw;
        }

        .card-body, #results-container {
            padding: 2.5rem 1.5rem;
        }

        .card-header {
            padding: 2rem;
            font-size: 1.3rem;
        }

        .btn-outline-primary, .btn-outline-success, .btn-outline-info {
            padding: 2rem 1rem;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        #themeToggleContainer {
            position: static;
            margin-bottom: 2rem;
            border-radius: 20px;
        }

        .main-content {
            padding-top: 0;
        }

        .btn-primary {
            padding: 1rem 2.5rem;
            font-size: 1.1rem;
        }

        .card {
            border-radius: 24px;
        }

        .card-header {
            border-radius: 24px 24px 0 0;
        }

        #results-container .fs-3 {
            font-size: 2rem !important;
        }
    }

    @@media (prefers-reduced-motion: reduce) {
        * {
            animation-duration: 0.01ms !important;
            animation-iteration-count: 1 !important;
            transition-duration: 0.01ms !important;
        }
    }

    /* Enhanced focus states for accessibility */
    .btn:focus,
    .form-control:focus,
    .form-select:focus {
        outline: 2px solid var(--primary);
        outline-offset: 2px;
    }

    /* Smooth scrolling */
    html {
        scroll-behavior: smooth;
    }

    /* Loading animation for cards */
    .card {
        animation: slideUp 0.8s ease-out;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(50px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Enhanced hover effects for interactive elements */
    .form-floating:hover .form-select,
    .form-floating:hover .form-control {
        border-color: var(--primary-light);
        box-shadow: 0 4px 15px rgba(139, 92, 246, 0.1);
        transform: translateY(-1px);
    }

    /* Gradient text for headers */
    .card-header {
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        background-size: 200% 200%;
        animation: gradientShift 6s ease infinite;
    }

    @@keyframes gradientShift {
        0% {
            background-position: 0% 50%;
        }

        50% {
            background-position: 100% 50%;
        }

        100% {
            background-position: 0% 50%;
        }
    }

    /* Modern scrollbar styling */
    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.1);
        border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb {
        background: var(--primary);
        border-radius: 4px;
        transition: background 0.3s ease;
    }

        ::-webkit-scrollbar-thumb:hover {
            background: var(--primary-dark);
        }

    /* Enhanced typography */
    h1, h2, h3, h4, h5, h6 {
        font-weight: 700;
        letter-spacing: -0.025em;
        line-height: 1.2;
    }

    p {
        font-weight: 400;
        line-height: 1.6;
    }

    /* Subtle micro-interactions */
    .card, .btn, .form-control, .form-select {
        will-change: transform;
    }

        /* Enhanced glassmorphism effect */
        .card::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255,255,255,0.05) 0%, transparent 50%, rgba(255,255,255,0.02) 100%);
            pointer-events: none;
            border-radius: inherit;
        }
</style>
<div class="container">
    <div class="d-flex justify-content-end">
        <button class="btn btn-outline-primary" id="themeToggle">
            <i class="bi bi-sun-fill d-none" id="sunIcon"></i>
            <i class="bi bi-moon-fill" id="moonIcon"></i>
        </button>
    </div>
    <div class="main-content">
        <div class="card">
            <div class="card-header">
                <i class="fas fa-calculator"></i> Detajet e Transportit
            </div>
            <div class="card-body">
                <form id="transportForm" onsubmit="return calculateTransport(event)">
                    <div id="validation-summary" class="d-none" role="alert" aria-live="assertive"></div>

                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="form-floating">
                                <select name="OriginId" id="OriginId" class="form-select" required aria-required="true">
                                    <option value="" selected disabled>Zgjidhni një vendndodhje</option>
                                    <option value="custom">📍 Zgjidhe nga harta</option>
                                    @foreach (var location in Model.Locations)
                                    {
                                        <option value="@location.Id"
                                                data-lat="@location.Latitude"
                                                data-lng="@location.Longitude"
                                                @(Model.OriginId == location.Id ? "selected" : "")>
                                            @location.Name (@location.Region)
                                        </option>
                                    }
                                </select>

                                <label for="OriginId">Pikënisja</label>
                            </div>
                            <div id="originMap" class="map-container" style="height: 300px;"></div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating">
                                <select name="DestinationId" id="DestinationId" class="form-select" required aria-required="true">
                                    <option value="" selected disabled>Zgjidhni një vendndodhje</option>
                                    <option value="custom">📍 Zgjidh nga harta</option>
                                    @foreach (var location in Model.Locations)
                                    {
                                        <option value="@location.Id"
                                                data-lat="@location.Latitude"
                                                data-lng="@location.Longitude"
                                                @(Model.DestinationId == location.Id ? "selected" : "")>
                                            @location.Name (@location.Region)
                                        </option>
                                    }
                                </select>

                                <label for="DestinationId">Destinacioni</label>
                            </div>
                            <div id="destinationMap" class="map-container" style="height: 300px;"></div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <label class="form-label fw-bold">Zgjidhni Llojin e Transportit:</label>
                        <div class="row g-3">
                            <div class="col-md-4 position-relative">
                                <input type="radio" class="btn-check" name="TransportType" id="taxi" value="Taxi" @(Model.TransportType == CalTransportType.Taxi ? "checked" : "") autocomplete="off" />
                                <label class="btn btn-outline-primary w-100 py-3" for="taxi" tabindex="0">
                                    <i class="fas fa-taxi fa-2x mb-2"></i>
                                    <span class="fw-bold">Taksi</span><br />
                                    <small class="text-muted">300 LEK bazë + 30 LEK/km</small>
                                </label>
                            </div>
                            <div class="col-md-4 position-relative">
                                <input type="radio" class="btn-check" name="TransportType" id="rental" value="Rental" @(Model.TransportType == CalTransportType.Rental ? "checked" : "") autocomplete="off" />
                                <label class="btn btn-outline-success w-100 py-3" for="rental" tabindex="0">
                                    <i class="fas fa-car fa-2x mb-2"></i>
                                    <span class="fw-bold">Makina me Qira</span><br />
                                    <small class="text-muted">5000 LEK bazë + 10 LEK/km</small>
                                </label>
                            </div>
                            <div class="col-md-4 position-relative">
                                <input type="radio" class="btn-check" name="TransportType" id="bus" value="Bus" @(Model.TransportType == CalTransportType.Bus ? "checked" : "") autocomplete="off" />
                                <label class="btn btn-outline-info w-100 py-3" for="bus" tabindex="0">
                                    <i class="fas fa-bus fa-2x mb-2"></i>
                                    <span class="fw-bold">Autobus</span><br />
                                    <small class="text-muted">100 LEK bazë + 5 LEK/km</small>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid d-md-flex justify-content-md-end gap-3 mt-5">
                        <button type="submit" class="btn btn-primary btn-lg px-4 me-md-2">
                            <i class="fas fa-calculator me-2"></i> Llogarisni Kostot
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <div class="card mt-5" id="calculationResults">
            <div class="card-header" style="background-color:#198754; color:white;">
                <h4 class="mb-0"><i class="fas fa-receipt me-2"></i> Rezultatet e Llogaritjes</h4>
            </div>
            <div class="card-body" id="results-container">
                <div class="text-center py-5">
                    <i class="fas fa-calculator fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">Zgjidhni vendndodhjet dhe llojin e transportit për të parë rezultatet e llogaritjes</h4>
                    <p class="text-muted mt-3">Pasi të plotësoni formularin dhe të klikoni "Llogarisni Kostot", detajet e kostos do të shfaqen këtu.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Font Awesome via CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
    <!-- Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        const locations = @Html.Raw(JsonConvert.SerializeObject(Model.Locations.ToDictionary(l => l.Id, l => new { l.Name, l.Region, l.Latitude, l.Longitude })));

        let customOriginCoords = null;
        let customDestinationCoords = null;
        let originMap, destinationMap, originMarker, destinationMarker;
        let originMapInitialized = false;
        let destinationMapInitialized = false;
        let originClickListener = null;
        let destinationClickListener = null;

        // Initialize Leaflet maps for origin and destination
        function initMaps() {
            // Initialize both maps immediately but keep them hidden
            originMap = L.map('originMap').setView([41.3275, 19.8189], 7); // Centered on Albania
            destinationMap = L.map('destinationMap').setView([41.3275, 19.8189], 7);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18 }).addTo(originMap);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18 }).addTo(destinationMap);

            originMapInitialized = true;
            destinationMapInitialized = true;
        }

        // Update marker on the map
        function updateMapMarker(map, markerRef, location) {
            if (markerRef) {
                map.removeLayer(markerRef);
            }
            const latLng = [location.Latitude, location.Longitude];
            const newMarker = L.marker(latLng).addTo(map).bindPopup(`${location.Name} (${location.Region})`).openPopup();
            map.setView(latLng, 10);
            return newMarker;
        }

        // Handle origin dropdown changes
        $("#OriginId").on("change", function () {
            const val = $(this).val();

            if (val === "custom") {
                // Make the map visible
                $("#originMap").css({ visibility: "visible", height: "300px" });

                // Ensure map is properly sized
                if (originMapInitialized) {
                    setTimeout(() => originMap.invalidateSize(), 100);
                }

                // Remove any previous click listener
                if (originClickListener) {
                    originMap.off('click', originClickListener);
                }

                // Add a new click listener
                originClickListener = function(e) {
                    const latlng = e.latlng;
                    if (originMarker) originMap.removeLayer(originMarker);
                    originMarker = L.marker(latlng).addTo(originMap).bindPopup("Origjina e zgjedhur").openPopup();
                    customOriginCoords = latlng; // Store the coordinates
                };

                originMap.on("click", originClickListener);
            } else {
                $("#originMap").css({ visibility: "hidden", height: "0" });
                customOriginCoords = null; // Reset custom origin coordinates

                // Remove click event listener if exists
                if (originClickListener) {
                    originMap.off('click', originClickListener);
                    originClickListener = null;
                }

                if (locations[val]) {
                    originMarker = updateMapMarker(originMap, originMarker, locations[val]);
                }
            }
        });

        // Handle destination dropdown changes
        $("#DestinationId").on("change", function () {
            const val = $(this).val();

            if (val === "custom") {
                // Make the map visible
                $("#destinationMap").css({ visibility: "visible", height: "300px" });

                // Ensure map is properly sized
                if (destinationMapInitialized) {
                    setTimeout(() => destinationMap.invalidateSize(), 100);
                }

                // Remove any previous click listener
                if (destinationClickListener) {
                    destinationMap.off('click', destinationClickListener);
                }

                // Add a new click listener
                destinationClickListener = function(e) {
                    const latlng = e.latlng;
                    if (destinationMarker) destinationMap.removeLayer(destinationMarker);
                    destinationMarker = L.marker(latlng).addTo(destinationMap).bindPopup("Destinacioni i zgjedhur").openPopup();
                    customDestinationCoords = latlng; // Store the coordinates
                };

                destinationMap.on("click", destinationClickListener);
            } else {
                $("#destinationMap").css({ visibility: "hidden", height: "0" });
                customDestinationCoords = null; // Reset custom destination coordinates

                // Remove click event listener if exists
                if (destinationClickListener) {
                    destinationMap.off('click', destinationClickListener);
                    destinationClickListener = null;
                }

                if (locations[val]) {
                    destinationMarker = updateMapMarker(destinationMap, destinationMarker, locations[val]);
                }
            }
        });

        // Theme Toggle Functionality
        $("#themeToggle").on("click", function() {
            const currentTheme = $("html").attr("data-bs-theme") || "light";
            const newTheme = currentTheme === "light" ? "dark" : "light";

            $("html").attr("data-bs-theme", newTheme);
            localStorage.setItem("theme", newTheme);

            if (newTheme === "dark") {
                $("#moonIcon").addClass("d-none");
                $("#sunIcon").removeClass("d-none");
            } else {
                $("#sunIcon").addClass("d-none");
                $("#moonIcon").removeClass("d-none");
            }

            // Reinitialize maps to ensure they render correctly with the new theme
            if (originMapInitialized) originMap.invalidateSize();
            if (destinationMapInitialized) destinationMap.invalidateSize();
        });

        // Validate and calculate transport costs
        function calculateTransport(e) {
            e.preventDefault();

            const originId = $("#OriginId").val();
            const destinationId = $("#DestinationId").val();
            const transportType = $("input[name='TransportType']:checked").val();
            const validationSummary = $("#validation-summary").addClass("d-none").empty();

            // Validate required fields
            if (!originId || !destinationId || !transportType) {
                validationSummary.removeClass("d-none").text("Ju lutemi plotësoni të gjitha fushat.");
                return false;
            }

            let origin, destination;

            // Prepare origin data
            if (originId === "custom" && customOriginCoords) {
                origin = {
                    Latitude: customOriginCoords.lat,
                    Longitude: customOriginCoords.lng,
                    Name: "Vendndodhje e personalizuar"
                };
            } else if (locations[originId]) {
                origin = locations[originId];
            } else {
                validationSummary.removeClass("d-none").text("Ju lutemi zgjidhni një vendndodhje fillestare ose klikoni në hartë.");
                return false;
            }

            // Prepare destination data
            if (destinationId === "custom" && customDestinationCoords) {
                destination = {
                    Latitude: customDestinationCoords.lat,
                    Longitude: customDestinationCoords.lng,
                    Name: "Vendndodhje e personalizuar"
                };
            } else if (locations[destinationId]) {
                destination = locations[destinationId];
            } else {
                validationSummary.removeClass("d-none").text("Ju lutemi zgjidhni një vendndodhje mbërritjeje ose klikoni në hartë.");
                return false;
            }

            // Ensure origin and destination are not the same
            if (
                (origin.Latitude === destination.Latitude && origin.Longitude === destination.Longitude) // Same coordinates
            ) {
                validationSummary.removeClass("d-none").text("Origjina dhe destinacioni nuk mund të jenë të njëjta.");
                return false;
            }

            // Make API call
            fetch("/Route/GetRoute", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    OriginLatitude: origin.Latitude,
                    OriginLongitude: origin.Longitude,
                    DestinationLatitude: destination.Latitude,
                    DestinationLongitude: destination.Longitude
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`API returned status ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                if (!data || !data.routes || !data.routes[0]) {
                    validationSummary.removeClass("d-none").text("Nuk ka të dhëna për këtë rrugë.");
                    return;
                }

                const route = data.routes[0];
                if (!route.summary || route.summary.distance == null || route.summary.duration == null) {
                    validationSummary.removeClass("d-none").text("Struktura e të dhënave nga API nuk është e vlefshme.");
                    return;
                }

                const distanceKm = route.summary.distance / 1000;
                const durationSec = route.summary.duration;

                let baseCost = 0, costPerKm = 0;
                switch (transportType) {
                    case "Taxi": baseCost = 300; costPerKm = 30; break;
                    case "Rental": baseCost = 5000; costPerKm = 10; break;
                    case "Bus": baseCost = 100; costPerKm = 5; break;
                    default:
                        validationSummary.removeClass("d-none").text("Lloji i transportit nuk është i vlefshëm.");
                        return;
                }

                const totalCost = baseCost + (costPerKm * distanceKm);
                const durationFormatted = durationSec >= 3600
                    ? `${Math.floor(durationSec / 3600)} orë ${Math.round((durationSec % 3600) / 60)} min`
                    : `${Math.round(durationSec / 60)} min`;

                $("#results-container").html(`
                    <div class="row">
                        <div class="col-md-6 mb-3"><h5>Pikënisja:</h5><p>${originId === "custom" ? "E zgjedhur në hartë" : origin.Name}</p></div>
                        <div class="col-md-6 mb-3"><h5>Destinacioni:</h5><p>${destinationId === "custom" ? "E zgjedhur në hartë" : destination.Name}</p></div>
                        <div class="col-md-6 mb-3"><h5>Distanca:</h5><p>${distanceKm.toFixed(2)} km</p></div>
                        <div class="col-md-6 mb-3"><h5>Kohëzgjatja:</h5><p>${durationFormatted}</p></div>
                        <div class="col-md-12"><h4>Kostoja Totale:</h4><p class="fs-3 fw-bold">${totalCost.toLocaleString()} LEK</p></div>
                    </div>
                `);
            })
            .catch(error => {
                console.error("Gabim API:", error);
                validationSummary.removeClass("d-none").text("Gabim gjatë marrjes së të dhënave nga API.");
            });

            return false;
        }

        $(document).ready(function () {
            // Load saved theme on page load
            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;

            if (savedTheme === 'dark' || (!savedTheme && systemPrefersDark)) {
                $("html").attr("data-bs-theme", "dark");
                $("#sunIcon").removeClass("d-none");
                $("#moonIcon").addClass("d-none");
            } else {
                $("html").attr("data-bs-theme", "light");
                $("#moonIcon").removeClass("d-none");
                $("#sunIcon").addClass("d-none");
            }

            initMaps();
        });
    </script>
}
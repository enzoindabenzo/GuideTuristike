@model DK1.Models.Cal.Location
@{
    ViewBag.Title = "Edit Location";
}

<div class="container">
    <div class="row">
        <div class="col-md-8 mx-auto">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Ndrysho Lokacionin</h5>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("EditLocationConfirmed", "TransportCalculator", FormMethod.Post, new { id = "editLocationForm" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(m => m.Id)

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Name, new { @for = "Name" })
                                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", id = "Name", required = "required", autocomplete = "name" })
                                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Region, new { @for = "Region" })
                                    @Html.TextBoxFor(m => m.Region, new { @class = "form-control", id = "Region", required = "required", autocomplete = "address-level1" })
                                    @Html.ValidationMessageFor(m => m.Region, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <label>Ndrysho lokacionin në hartë:</label>
                            <div id="editMap" style="height: 400px; width: 100%;"></div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Latitude, new { @for = "EditLatitude" })
                                    @Html.TextBoxFor(m => m.Latitude, new { @class = "form-control", type = "number", step = "0.000001", required = "required", id = "EditLatitude", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(m => m.Latitude, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Longitude, new { @for = "EditLongitude" })
                                    @Html.TextBoxFor(m => m.Longitude, new { @class = "form-control", type = "number", step = "0.000001", required = "required", id = "EditLongitude", @readonly = "readonly" })
                                    @Html.ValidationMessageFor(m => m.Longitude, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>

                        <div class="form-check mb-3">
                            @Html.CheckBoxFor(m => m.IsPopularDestination, new { @class = "form-check-input", id = "IsPopularDestination" })
                            @Html.LabelFor(m => m.IsPopularDestination, new { @class = "form-check-label", @for = "IsPopularDestination" })
                        </div>

                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-primary">Ruaj Ndryshimet</button>
                            <a href="@Url.Action("ManageLocations", "TransportCalculator")" class="btn btn-secondary ms-2">Kthehu</a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.css" />

    <style>
        /* Enhanced Page Background */
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
        }

        .container {
            position: relative;
            z-index: 1;
        }

        .container::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="15" height="15" patternUnits="userSpaceOnUse"><path d="M 15 0 L 0 0 0 15" fill="none" stroke="rgba(255,255,255,0.08)" stroke-width="1"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
            pointer-events: none;
            z-index: -1;
        }

        /* Enhanced Card Design */
        .card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 20px;
            box-shadow:
                0 20px 40px rgba(0, 0, 0, 0.1),
                0 10px 20px rgba(0, 0, 0, 0.05);
            overflow: hidden;
            margin-top: 2rem;
            margin-bottom: 2rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow:
                0 25px 50px rgba(0, 0, 0, 0.15),
                0 15px 25px rgba(0, 0, 0, 0.08);
        }

        /* Enhanced Header */
        .card-header {
            background: linear-gradient(135deg, #007bff, #0056b3) !important;
            border-bottom: none !important;
            padding: 1.5rem 2rem;
        }

        .card-header h5 {
            color: white !important;
            font-weight: 600;
            margin: 0;
            font-size: 1.3rem;
        }

        /* Card Body */
        .card-body {
            padding: 2rem;
        }

        /* Form Styling */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-control {
            border: 2px solid #e3f2fd;
            border-radius: 10px;
            padding: 0.75rem 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.9);
        }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            background: white;
        }

        label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.5rem;
        }

        /* Map Container */
        #editMap {
            border-radius: 15px;
            border: 3px solid rgba(255, 255, 255, 0.6);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        /* Checkbox Styling */
        .form-check {
            background: rgba(0, 123, 255, 0.05);
            border: 1px solid rgba(0, 123, 255, 0.2);
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .form-check-input {
            width: 1.2rem;
            height: 1.2rem;
            margin-right: 0.5rem;
        }

        .form-check-label {
            font-weight: 500;
            color: #495057;
        }

        /* Button Styling */
        .btn {
            border-radius: 8px;
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
        }

        .btn-primary {
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            box-shadow: 0 4px 15px rgba(0, 123, 255, 0.3);
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #0056b3, #004085);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 123, 255, 0.4);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6c757d, #5a6268);
            color: white;
            box-shadow: 0 4px 15px rgba(108, 117, 125, 0.3);
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #5a6268, #495057);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
            color: white;
        }

        /* Responsive */
        @@media (max-width: 768px) {
            .card-body {
                padding: 1.5rem;
            }

            .btn {
                width: 100%;
                margin-bottom: 0.5rem;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/leaflet@1.9.4/dist/leaflet.js"></script>
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            // Get the current coordinates
            var currentLat = parseFloat($('#EditLatitude').val());
            var currentLng = parseFloat($('#EditLongitude').val());

            // Initialize the map centered on the location
            var map = L.map('editMap').setView([currentLat, currentLng], 13);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Add a marker at the location
            var marker = L.marker([currentLat, currentLng], {
                draggable: true
            }).addTo(map);

            // Update lat/lng fields when marker is dragged
            marker.on('dragend', function (e) {
                updateCoordinates(e.target.getLatLng());
            });

            // Update lat/lng fields when map is clicked
            map.on('click', function (e) {
                marker.setLatLng(e.latlng);
                updateCoordinates(e.latlng);
            });

            // Function to update coordinate fields
            function updateCoordinates(latlng) {
                $('#EditLatitude').val(latlng.lat.toFixed(6));
                $('#EditLongitude').val(latlng.lng.toFixed(6));
            }

            // Validate form on submission
            $('#editLocationForm').submit(function (e) {
                let lat = parseFloat($('#EditLatitude').val());
                let lng = parseFloat($('#EditLongitude').val());

                // Rough bounds for Albania
                if (lat < 39 || lat > 43) {
                    alert("Latitude should be between 39° and 43° for Albania");
                    e.preventDefault();
                    return false;
                }

                if (lng < 19 || lng > 21.5) {
                    alert("Longitude should be between 19° and 21.5° for Albania");
                    e.preventDefault();
                    return false;
                }
            });
        });
    </script>
}
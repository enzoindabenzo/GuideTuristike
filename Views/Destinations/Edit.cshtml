@using DK1.Models
@model Destination

@{
    ViewBag.Title = "Ndrysho Detajet mbi Destinacionin";
}

<style>
:root {
    --primary-color: #667eea;
    --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    --secondary-color: #f093fb;
    --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    --success-color: #4facfe;
    --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    --warning-color: #fa709a;
    --warning-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
    --danger-color: #ff6b6b;
    --danger-gradient: linear-gradient(135deg, #ff6b6b 0%, #ffa726 100%);
    --dark-color: #2c3e50;
    --light-color: #ffffff;
    --glass-bg: rgba(255, 255, 255, 0.25);
    --glass-border: rgba(255, 255, 255, 0.18);
    --shadow-light: 0 8px 32px rgba(31, 38, 135, 0.37);
    --shadow-heavy: 0 20px 60px rgba(0, 0, 0, 0.15);
    --border-radius: 20px;
    --transition: all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
}

* {
    box-sizing: border-box;
}

body {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
    min-height: 100vh;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    position: relative;
    overflow-x: hidden;
    margin: 0;
    padding-top: 80px; /* Space below navbar */
}

body::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(circle at 20% 50%, rgba(120, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 80% 20%, rgba(255, 119, 198, 0.3) 0%, transparent 50%),
                radial-gradient(circle at 40% 80%, rgba(120, 219, 255, 0.3) 0%, transparent 50%);
    pointer-events: none;
    z-index: -1;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
    position: relative;
    z-index: 1;
}

.destination-hero {
    background: var(--glass-bg);
    backdrop-filter: blur(20px);
    border: 1px solid var(--glass-border);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-heavy);
    margin-bottom: 3rem;
    overflow: hidden;
    position: relative;
    animation: slideUp 0.8s ease-out;
}

.destination-hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    animation: shimmer 3s infinite;
}

@@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(50px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@@keyframes shimmer {
    0% {
        left: -100%;
    }
    100% {
        left: 100%;
    }
}

.hero-header {
    background: var(--primary-gradient);
    color: white;
    padding: 3rem 2.5rem;
    position: relative;
    overflow: hidden;
}

.hero-header::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -10%;
    width: 200px;
    height: 200px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    animation: float 6s ease-in-out infinite;
}

.hero-header::after {
    content: '';
    position: absolute;
    bottom: -30%;
    left: -5%;
    width: 150px;
    height: 150px;
    background: rgba(255, 255, 255, 0.08);
    border-radius: 50%;
    animation: float 4s ease-in-out infinite reverse;
}

@@keyframes float {
    0%, 100% {
        transform: translateY(0px) rotate(0deg);
    }
    50% {
        transform: translateY(-20px) rotate(10deg);
    }
}

.hero-title {
    font-size: 2.8rem;
    font-weight: 800;
    margin: 0;
    text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    position: relative;
    z-index: 2;
}

.hero-subtitle {
    font-size: 1.2rem;
    opacity: 0.9;
    margin: 0.5rem 0 0 0;
    font-weight: 300;
    position: relative;
    z-index: 2;
}

.detail-grid {
    padding: 3rem 2.5rem;
    display: grid;
    gap: 2.5rem;
}

.detail-card {
    background: rgba(255, 255, 255, 0.9);
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    border: 1px solid rgba(255, 255, 255, 0.3);
    transition: var(--transition);
    position: relative;
    overflow: hidden;
}

.detail-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background: var(--primary-gradient);
    transform: scaleX(0);
    transition: var(--transition);
}

.detail-card:hover::before {
    transform: scaleX(1);
}

.detail-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
}

.form-group {
    margin-bottom: 2rem;
    position: relative;
    animation: fadeInUp 0.8s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
}

.form-group:nth-child(1) { animation-delay: 0.1s; }
.form-group:nth-child(2) { animation-delay: 0.2s; }
.form-group:nth-child(3) { animation-delay: 0.3s; }
.form-group:nth-child(4) { animation-delay: 0.4s; }
.form-group:nth-child(5) { animation-delay: 0.5s; }
.form-group:nth-child(6) { animation-delay: 0.6s; }
.form-group:nth-child(7) { animation-delay: 0.7s; }
.form-group:nth-child(8) { animation-delay: 0.8s; }

@@keyframes fadeInUp {
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.form-label {
    font-weight: 700;
    color: var(--dark-color);
    font-size: 0.95rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.8rem;
}

.form-label::before {
    content: '';
    width: 4px;
    height: 4px;
    background: var(--primary-color);
    border-radius: 50%;
    display: inline-block;
}

.form-control-custom {
    width: 100%;
    border: 2px solid rgba(102, 126, 234, 0.2);
    border-radius: 12px;
    padding: 1rem 1.2rem;
    font-size: 1rem;
    font-weight: 500;
    transition: var(--transition);
    background: rgba(255, 255, 255, 0.95);
    color: #34495e;
    line-height: 1.6;
}

.form-control-custom:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.2);
    background: rgba(255, 255, 255, 1);
    transform: translateY(-2px);
}

.form-control-custom::placeholder {
    color: #a0a9c0;
    font-style: italic;
}

textarea.form-control-custom {
    resize: vertical;
    min-height: 120px;
    font-family: inherit;
}

.expense-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
}

.expense-badge {
    background: var(--success-gradient);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    box-shadow: 0 4px 15px rgba(79, 172, 254, 0.3);
    transition: var(--transition);
    position: relative;
    overflow: hidden;
    display: inline-block;
}

.expense-badge::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: var(--transition);
}

.expense-badge:hover::before {
    left: 100%;
}

.expense-badge:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(79, 172, 254, 0.4);
}

.file-upload-container {
    position: relative;
    background: rgba(255, 255, 255, 0.95);
    border: 2px dashed rgba(102, 126, 234, 0.3);
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    transition: var(--transition);
    cursor: pointer;
}

.file-upload-container:hover {
    border-color: var(--primary-color);
    background: rgba(255, 255, 255, 1);
    transform: translateY(-2px);
}

.file-upload-container input[type="file"] {
    position: absolute;
    opacity: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
}

.file-upload-text {
    color: var(--primary-color);
    font-weight: 600;
    font-size: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.file-upload-text::before {
    content: '🖼️';
    font-size: 1.5rem;
}

.current-image {
    margin-top: 1.5rem;
    text-align: center;
}

.current-image img {
    max-width: 300px;
    height: auto;
    border-radius: 12px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    border: 3px solid rgba(102, 126, 234, 0.3);
    transition: var(--transition);
}

.current-image img:hover {
    transform: scale(1.02);
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.2);
}

.current-image-label {
    display: block;
    margin-bottom: 1rem;
    font-weight: 600;
    color: var(--primary-color);
    font-size: 0.95rem;
}

.validation-error {
    color: #e74c3c;
    font-size: 0.9rem;
    margin-top: 0.5rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.3rem;
}

.validation-error::before {
    content: '';
    font-size: 0.8rem;
}

.alert {
    border-radius: 12px;
    padding: 1.2rem 1.5rem;
    margin-bottom: 2rem;
    border: none;
    box-shadow: 0 4px 15px rgba(231, 76, 60, 0.2);
    background: linear-gradient(135deg, #ffe8e8 0%, #ffd6d6 100%);
    color: #721c24;
    font-weight: 600;
}

.action-bar {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    margin-top: 3rem;
    flex-wrap: wrap;
}

.btn {
    padding: 1rem 2rem;
    border: none;
    border-radius: 50px;
    font-weight: 600;
    font-size: 1rem;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: var(--transition);
    position: relative;
    overflow: hidden;
    cursor: pointer;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    min-width: 150px;
    justify-content: center;
}

.btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: var(--transition);
}

.btn:hover::before {
    left: 100%;
}

.btn-update {
    background: var(--warning-gradient);
    color: white;
    box-shadow: 0 4px 15px rgba(250, 112, 154, 0.3);
}

.btn-update:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(250, 112, 154, 0.4);
    color: white;
}

.btn-back {
    background: rgba(255, 255, 255, 0.9);
    color: var(--dark-color);
    border: 2px solid rgba(255, 255, 255, 0.3);
    backdrop-filter: blur(10px);
}

.btn-back:hover {
    background: rgba(255, 255, 255, 1);
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    color: var(--dark-color);
}

.btn-delete {
    background: var(--danger-gradient);
    color: white;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.3);
}

.btn-delete:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(255, 107, 107, 0.4);
    color: white;
}

.category-tag {
    background: var(--secondary-gradient);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    font-weight: 600;
    display: inline-block;
    box-shadow: 0 4px 15px rgba(240, 147, 251, 0.3);
}

@@media (max-width: 768px) {
    body {
        padding-top: 70px;
    }

    .hero-title {
        font-size: 2.2rem;
    }

    .expense-row {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .detail-grid {
        padding: 2rem 1.5rem;
    }

    .hero-header {
        padding: 2rem 1.5rem;
    }

    .action-bar {
        flex-direction: column;
    }

    .btn {
        width: 100%;
    }
}
</style>

<div class="container">
    <div class="destination-hero">
        <div class="hero-header">
            <h1 class="hero-title">@ViewBag.Title</h1>
            <p class="hero-subtitle">Përditësoni informacionet e destinacionit</p>
        </div>

        <div class="detail-grid">
            <div class="detail-card">
                @using (Html.BeginForm("Edit", "Destinations", FormMethod.Post, new { enctype = "multipart/form-data" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.ImagePath)
                    @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                    <div class="form-group">
                        @Html.LabelFor(model => model.Name, "Emri i Destinacionit", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.Name, new
                        {
                            @class = "form-control-custom",
                            placeholder = "P.sh. Durrësi, Saranda, Tirana..."
                        })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Region, "Rajoni", new { @class = "form-label" })
                        @Html.TextBoxFor(model => model.Region, new
                        {
                            @class = "form-control-custom",
                            placeholder = "P.sh. Qark Durrës, Vlorë, Tiranë..."
                        })
                        @Html.ValidationMessageFor(model => model.Region, "", new { @class = "validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryId, "Kategoria", new { @class = "form-label" })
                        @Html.DropDownListFor(model => model.CategoryId, (SelectList)ViewBag.CategoryList, "🏷️ Zgjidh Kategorinë", new
                        {
                            @class = "form-control-custom"
                        })
                        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "validation-error" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Description, "Përshkrimi", new { @class = "form-label" })
                        @Html.TextAreaFor(model => model.Description, new
                        {
                            @class = "form-control-custom",
                            rows = 5,
                            placeholder = "Shkruani një përshkrim të detajuar të destinacionit..."
                        })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "validation-error" })
                    </div>

                    <div class="form-group">
                        <label class="form-label">Buxheti Ditor (ALL)</label>
                        <div class="expense-row">
                            <div>
                                @Html.LabelFor(model => model.MinDailyExpenseAL, "Minimumi", new { @class = "form-label" })
                                @Html.TextBoxFor(model => model.MinDailyExpenseAL, new
                                {
                                    @class = "form-control-custom",
                                    placeholder = "2000",
                                    type = "number",
                                    step = "100",
                                    min = "0"
                                })
                                @Html.ValidationMessageFor(model => model.MinDailyExpenseAL, "", new { @class = "validation-error" })
                            </div>
                            <div>
                                @Html.LabelFor(model => model.MaxDailyExpenseAL, "Maksimumi", new { @class = "form-label" })
                                @Html.TextBoxFor(model => model.MaxDailyExpenseAL, new
                                {
                                    @class = "form-control-custom",
                                    placeholder = "8000",
                                    type = "number",
                                    step = "100",
                                    min = "0"
                                })
                                @Html.ValidationMessageFor(model => model.MaxDailyExpenseAL, "", new { @class = "validation-error" })
                            </div>
                        </div>
                    </div>

                    if (!string.IsNullOrEmpty(Model.ImagePath))
                    {
                        <div class="form-group">
                            <label class="form-label">Foto Aktuale</label>
                            <div class="current-image">
                                <label class="current-image-label">Foto e tanishme:</label>
                                <img src="@Url.Content(Model.ImagePath)" alt="@Model.Name" />
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        <label class="form-label">Ndrysho Foton</label>
                        <div class="file-upload-container">
                            <input type="file" name="imageFile" accept="image/*" />
                            <div class="file-upload-text">
                                Zgjidh një foto të re (opsionale)
                            </div>
                        </div>
                    </div>

                    <div class="action-bar">
                        @Html.ActionLink("🔙 Kthehu", "Index", null, new { @class = "btn btn-back" })
                        <button type="submit" class="btn btn-update">✏️ Përditëso</button>
                        @Html.ActionLink("🗑️ Fshi", "Delete", new { id = Model.Id }, new
                        {
                            @class = "btn btn-delete",
                            onclick = "return confirm('A jeni të sigurt që doni të fshini këtë destinacion?')"
                        })
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const fileInput = document.querySelector('input[type="file"]');
        const uploadContainer = document.querySelector('.file-upload-container');
        const uploadText = document.querySelector('.file-upload-text');

        if (fileInput && uploadContainer) {
            fileInput.addEventListener('change', function (e) {
                if (e.target.files.length > 0) {
                    uploadText.innerHTML = '✅ ' + e.target.files[0].name;
                    uploadContainer.style.borderColor = 'var(--primary-color)';
                    uploadContainer.style.background = 'rgba(255, 255, 255, 1)';
                } else {
                    uploadText.innerHTML = '🖼️ Zgjidh një foto të re (opsionale)';
                    uploadContainer.style.borderColor = 'rgba(102, 126, 234, 0.3)';
                    uploadContainer.style.background = 'rgba(255, 255, 255, 0.95)';
                }
            });

            // Drag and drop functionality
            uploadContainer.addEventListener('dragover', function (e) {
                e.preventDefault();
                uploadContainer.style.borderColor = 'var(--primary-color)';
                uploadContainer.style.background = 'rgba(255, 255, 255, 1)';
            });

            uploadContainer.addEventListener('dragleave', function (e) {
                e.preventDefault();
                uploadContainer.style.borderColor = 'rgba(102, 126, 234, 0.3)';
                uploadContainer.style.background = 'rgba(255, 255, 255, 0.95)';
            });

            uploadContainer.addEventListener('drop', function (e) {
                e.preventDefault();
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    uploadText.innerHTML = '✅ ' + files[0].name;
                    uploadContainer.style.borderColor = 'var(--primary-color)';
                    uploadContainer.style.background = 'rgba(255, 255, 255, 1)';
                }
            });
        }
    });
</script>
@using DK1.Models.Cal
@using CalTransportType = DK1.Models.Cal.TransportType
@using Newtonsoft.Json
@model TransportCalculatorViewModel

@{ ViewData["Title"] = "Llogaritësi i Kostos së Transportit Shqiptar"; }

<style>
    #originMap, #destinationMap {
        visibility: hidden;
        height: 0;
    }

    :root {
        --primary: #4F6F52;
        --primary-dark: #3A4D39;
        --primary-light: #A3B18A;
        --primary-lighter: #D3E0C2; /* lighter shade for selected background */

        --light-bg: #F9FAFB;
        --dark-bg: #121212;
        --light-card-bg: #FFFFFF;
        --dark-card-bg: #1E1E1E;
        --text-light: #F8F9FA;
        --text-dark: #212529;
        --text-muted-light: #6C757D;
        --text-muted-dark: #A3A3A3;
        --border-light: #DEE2E6;
        --border-dark: #444;
        --btn-bg-light: var(--primary);
        --btn-bg-dark: var(--primary-light);
        --btn-hover-light: var(--primary-dark);
        --btn-hover-dark: #5a6e52;
        --form-bg-light: #FFFFFF;
        --form-bg-dark: #2A2A2A;
    }

    [data-bs-theme="light"] {
        --body-bg: var(--light-bg);
        --card-bg: var(--light-card-bg);
        --text-color: var(--text-dark);
        --text-muted: var(--text-muted-light);
        --border-color: var(--border-light);
        --btn-bg: var(--btn-bg-light);
        --btn-hover: var(--btn-hover-light);
        --form-bg: var(--form-bg-light);
        --selected-bg: var(--primary-lighter);
        --selected-color: var(--primary-dark);
    }

    [data-bs-theme="dark"] {
        --body-bg: var(--dark-bg);
        --card-bg: var(--dark-card-bg);
        --text-color: var(--text-light);
        --text-muted: var(--text-muted-dark);
        --border-color: var(--border-dark);
        --btn-bg: var(--btn-bg-dark);
        --btn-hover: var(--btn-hover-dark);
        --form-bg: var(--form-bg-dark);
        --selected-bg: #3B5036; /* slightly lighter dark green */
        --selected-color: var(--text-light);
    }

    body {
        background-color: var(--body-bg);
        color: var(--text-color);
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        transition: background-color 0.4s ease, color 0.4s ease;
        margin: 0;
        padding: 0;
        padding-top: 70px;
    }

    .page-container {
        max-width: 900px; /* wider */
        margin: 2.5rem auto 4rem; /* pushed down a bit */
        padding: 0 1.5rem;
    }

    /* Theme toggle bar below navbar */
    #themeToggleContainer {
        background-color: var(--card-bg);
        border-bottom: 1px solid var(--border-color);
        padding: 0.75rem 1.5rem;
        display: flex;
        justify-content: flex-end;
        align-items: center;
        margin-bottom: 1rem; /* more space below toggle */
        border-radius: 0.8rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: background-color 0.4s ease, border-color 0.4s ease;
        position: fixed;
        top: 60px; /* Adjust this value based on your navbar height */
        right: 0;
        left: 0;
        z-index: 1000;
    }

    #themeToggle {
        cursor: pointer;
        background-color: transparent;
        border: 2px solid var(--primary);
        border-radius: 0.8rem;
        color: var(--primary);
        padding: 0.5rem 1.3rem;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 0.6rem;
        transition: all 0.3s ease;
    }

        #themeToggle:hover {
            background-color: var(--primary);
            color: white;
            border-color: var(--primary-dark);
        }

        #themeToggle i {
            font-size: 1.3rem;
        }

    /* Main content padding to account for fixed theme toggle */
    .main-content {
        padding-top: 0px; /* Adjust based on theme toggle container height */
    }

    /* Main card styling */
    .card {
        background-color: var(--card-bg);
        border-radius: 1rem;
        box-shadow: 0 1.25rem 1.75rem rgba(0, 0, 0, 0.12);
        transition: background-color 0.4s ease, box-shadow 0.3s ease;
        border: 1px solid var(--border-color);
        overflow: hidden;
        margin-bottom: 3rem; /* extra space between cards */
    }

    .card-header {
        background-color: var(--primary);
        color: white;
        font-size: 1.35rem;
        padding: 1.25rem 2.5rem;
        font-weight: 700;
        border-radius: 1rem 1rem 0 0;
        display: flex;
        align-items: center;
        gap: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.18);
    }

        .card-header i {
            font-size: 1.6rem;
        }

    .card-body {
        padding: 2.25rem 3rem;
        color: var(--text-color);
    }

    label.form-label {
        font-weight: 600;
        color: var(--text-color);
        margin-bottom: 0.75rem;
        user-select: none;
    }

    .form-select, .form-control {
        background-color: var(--form-bg);
        color: var(--text-color);
        border: 1.5px solid var(--border-color);
        border-radius: 1rem;
        padding: 0.75rem 1.25rem;
        font-size: 1.05rem;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
        margin-bottom: 1.5rem; /* better spacing between controls */
    }

        .form-select:focus, .form-control:focus {
            outline: none;
            border-color: var(--primary-light);
            box-shadow: 0 0 10px var(--primary-light);
        }

    /* Transport type buttons */
    .btn-outline-primary, .btn-outline-success, .btn-outline-info {
        border-radius: 1rem;
        padding: 1.5rem 1.2rem;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        transition: all 0.35s ease;
        user-select: none;
        cursor: pointer;
        margin-bottom: 1rem; /* spacing if stacked on mobile */
    }

        .btn-outline-primary:hover, .btn-outline-success:hover, .btn-outline-info:hover {
            filter: brightness(1.15);
            color: white !important;
        }

    /* Lighter selected background and darker text */
    .btn-check:checked + label.btn-outline-primary {
        background-color: var(--selected-bg);
        color: var(--selected-color);
        border-color: var(--primary);
        filter: none;
    }

    .btn-check:checked + label.btn-outline-success {
        background-color: var(--selected-bg);
        color: var(--selected-color);
        border-color: #198754;
        filter: none;
    }

    .btn-check:checked + label.btn-outline-info {
        background-color: var(--selected-bg);
        color: var(--selected-color);
        border-color: #0dcaf0;
        filter: none;
    }

    .btn-check {
        position: absolute;
        clip: rect(0, 0, 0, 0);
        pointer-events: none;
    }

    /* Validation summary styling */
    #validation-summary {
        margin-bottom: 1.75rem;
        font-weight: 700;
        color: #dc3545;
        user-select: none;
        font-size: 1rem;
    }

    /* Submit button */
    .btn-primary {
        background-color: var(--btn-bg);
        border-color: var(--btn-bg);
        color: white;
        font-weight: 700;
        border-radius: 1rem;
        padding: 0.9rem 1.8rem;
        font-size: 1.15rem;
        transition: background-color 0.3s ease, border-color 0.3s ease;
        box-shadow: 0 5px 15px rgb(0 0 0 / 0.15);
    }

        .btn-primary:hover {
            background-color: var(--btn-hover);
            border-color: var(--btn-hover);
            box-shadow: 0 7px 20px rgb(0 0 0 / 0.25);
        }

    /* Results card */
    #calculationResults .card-header {
        background-color: #198754;
        border-radius: 1rem 1rem 0 0;
        box-shadow: 0 4px 12px rgba(0,0,0,0.18);
        font-weight: 700;
        font-size: 1.25rem;
    }

    #results-container {
        padding: 2.5rem 3rem;
        color: var(--text-color);
    }

        #results-container h5 {
            font-weight: 700;
            margin-bottom: 0.4rem;
            color: var(--text-color);
        }

        #results-container p {
            margin: 0;
            color: var(--text-muted);
            font-weight: 600;
            font-size: 1.05rem;
        }

    /* Map containers */
    .map-container {
        margin-top: 10px;
        margin-bottom: 20px;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid var(--border-color);
    }

    /* Responsive tweaks */
    @@media (max-width: 767px) {
        .page-container {
            margin: 2rem auto 3rem;
            padding: 0 1rem;
            max-width: 95vw;
        }

        .card-body {
            padding: 1.5rem 1.75rem;
        }

        #results-container {
            padding: 1.75rem 1.75rem;
        }

        .btn-outline-primary, .btn-outline-success, .btn-outline-info {
            padding: 1.25rem 1rem;
            font-size: 1rem;
            margin-bottom: 1rem;
        }

        #themeToggleContainer {
            position: static;
            margin-bottom: 1.5rem;
        }

        .main-content {
            padding-top: 0;
        }
    }

    body.dark-mode {
        background-color: #121212;
        color: #f5f5f5;
    }

        body.dark-mode a {
            color: #bb86fc;
        }

        body.dark-mode .btn-outline-primary {
            color: #bb86fc;
            border-color: #bb86fc;
        }

            body.dark-mode .btn-outline-primary:hover {
                background-color: #bb86fc;
                color: #121212;
            }
</style>

<div class="container">
    <div class="d-flex justify-content-end">
        <button class="btn btn-outline-primary" id="themeToggle">
            <i class="bi bi-sun-fill d-none" id="sunIcon"></i>
            <i class="bi bi-moon-fill" id="moonIcon"></i>
        </button>
    </div>
    <div class="main-content">
        <div class="card">
            <div class="card-header">
                <i class="fas fa-calculator"></i> Detajet e Transportit
            </div>
            <div class="card-body">
                <form id="transportForm" onsubmit="return calculateTransport(event)">
                    <div id="validation-summary" class="d-none" role="alert" aria-live="assertive"></div>

                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="form-floating">
                                <select name="OriginId" id="OriginId" class="form-select" required aria-required="true">
                                    <option value="" selected disabled>Zgjidhni një vendndodhje</option>
                                    <option value="custom">📍 Zgjidhe nga harta</option>
                                    @foreach (var location in Model.Locations)
                                    {
                                        <option value="@location.Id"
                                                data-lat="@location.Latitude"
                                                data-lng="@location.Longitude"
                                                @(Model.OriginId == location.Id ? "selected" : "")>
                                            @location.Name (@location.Region)
                                        </option>
                                    }
                                </select>

                                <label for="OriginId">Pikënisja</label>
                            </div>
                            <div id="originMap" class="map-container" style="height: 300px;"></div>
                        </div>

                        <div class="col-md-6">
                            <div class="form-floating">
                                <select name="DestinationId" id="DestinationId" class="form-select" required aria-required="true">
                                    <option value="" selected disabled>Zgjidhni një vendndodhje</option>
                                    <option value="custom">📍 Zgjidh nga harta</option>
                                    @foreach (var location in Model.Locations)
                                    {
                                        <option value="@location.Id"
                                                data-lat="@location.Latitude"
                                                data-lng="@location.Longitude"
                                                @(Model.DestinationId == location.Id ? "selected" : "")>
                                            @location.Name (@location.Region)
                                        </option>
                                    }
                                </select>

                                <label for="DestinationId">Destinacioni</label>
                            </div>
                            <div id="destinationMap" class="map-container" style="height: 300px;"></div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <label class="form-label fw-bold">Zgjidhni Llojin e Transportit:</label>
                        <div class="row g-3">
                            <div class="col-md-4 position-relative">
                                <input type="radio" class="btn-check" name="TransportType" id="taxi" value="Taxi" @(Model.TransportType == CalTransportType.Taxi ? "checked" : "") autocomplete="off" />
                                <label class="btn btn-outline-primary w-100 py-3" for="taxi" tabindex="0">
                                    <i class="fas fa-taxi fa-2x mb-2"></i>
                                    <span class="fw-bold">Taksi</span><br />
                                    <small class="text-muted">300 LEK bazë + 15 LEK/km</small>
                                </label>
                            </div>
                            <div class="col-md-4 position-relative">
                                <input type="radio" class="btn-check" name="TransportType" id="rental" value="Rental" @(Model.TransportType == CalTransportType.Rental ? "checked" : "") autocomplete="off" />
                                <label class="btn btn-outline-success w-100 py-3" for="rental" tabindex="0">
                                    <i class="fas fa-car fa-2x mb-2"></i>
                                    <span class="fw-bold">Makina me Qira</span><br />
                                    <small class="text-muted">5000 LEK bazë + 10 LEK/km</small>
                                </label>
                            </div>
                            <div class="col-md-4 position-relative">
                                <input type="radio" class="btn-check" name="TransportType" id="bus" value="Bus" @(Model.TransportType == CalTransportType.Bus ? "checked" : "") autocomplete="off" />
                                <label class="btn btn-outline-info w-100 py-3" for="bus" tabindex="0">
                                    <i class="fas fa-bus fa-2x mb-2"></i>
                                    <span class="fw-bold">Autobus</span><br />
                                    <small class="text-muted">100 LEK bazë + 3 LEK/km</small>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid d-md-flex justify-content-md-end gap-3 mt-5">
                        <button type="submit" class="btn btn-primary btn-lg px-4 me-md-2">
                            <i class="fas fa-calculator me-2"></i> Llogarisni Kostot
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <div class="card mt-5" id="calculationResults">
            <div class="card-header" style="background-color:#198754; color:white;">
                <h4 class="mb-0"><i class="fas fa-receipt me-2"></i> Rezultatet e Llogaritjes</h4>
            </div>
            <div class="card-body" id="results-container">
                <div class="text-center py-5">
                    <i class="fas fa-calculator fa-4x text-muted mb-3"></i>
                    <h4 class="text-muted">Zgjidhni vendndodhjet dhe llojin e transportit për të parë rezultatet e llogaritjes</h4>
                    <p class="text-muted mt-3">Pasi të plotësoni formularin dhe të klikoni "Llogarisni Kostot", detajet e kostos do të shfaqen këtu.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- Font Awesome via CDN -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />
    <!-- Leaflet -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>
        const locations = @Html.Raw(JsonConvert.SerializeObject(Model.Locations.ToDictionary(l => l.Id, l => new { l.Name, l.Region, l.Latitude, l.Longitude })));

        let customOriginCoords = null;
        let customDestinationCoords = null;
        let originMap, destinationMap, originMarker, destinationMarker;
        let originMapInitialized = false;
        let destinationMapInitialized = false;
        let originClickListener = null;
        let destinationClickListener = null;

        // Initialize Leaflet maps for origin and destination
        function initMaps() {
            // Initialize both maps immediately but keep them hidden
            originMap = L.map('originMap').setView([41.3275, 19.8189], 7); // Centered on Albania
            destinationMap = L.map('destinationMap').setView([41.3275, 19.8189], 7);

            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18 }).addTo(originMap);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18 }).addTo(destinationMap);

            originMapInitialized = true;
            destinationMapInitialized = true;
        }

        // Update marker on the map
        function updateMapMarker(map, markerRef, location) {
            if (markerRef) {
                map.removeLayer(markerRef);
            }
            const latLng = [location.Latitude, location.Longitude];
            const newMarker = L.marker(latLng).addTo(map).bindPopup(`${location.Name} (${location.Region})`).openPopup();
            map.setView(latLng, 10);
            return newMarker;
        }

        // Handle origin dropdown changes
        $("#OriginId").on("change", function () {
            const val = $(this).val();

            if (val === "custom") {
                // Make the map visible
                $("#originMap").css({ visibility: "visible", height: "300px" });

                // Ensure map is properly sized
                if (originMapInitialized) {
                    setTimeout(() => originMap.invalidateSize(), 100);
                }

                // Remove any previous click listener
                if (originClickListener) {
                    originMap.off('click', originClickListener);
                }

                // Add a new click listener
                originClickListener = function(e) {
                    const latlng = e.latlng;
                    if (originMarker) originMap.removeLayer(originMarker);
                    originMarker = L.marker(latlng).addTo(originMap).bindPopup("Origjina e zgjedhur").openPopup();
                    customOriginCoords = latlng; // Store the coordinates
                };

                originMap.on("click", originClickListener);
            } else {
                $("#originMap").css({ visibility: "hidden", height: "0" });
                customOriginCoords = null; // Reset custom origin coordinates

                // Remove click event listener if exists
                if (originClickListener) {
                    originMap.off('click', originClickListener);
                    originClickListener = null;
                }

                if (locations[val]) {
                    originMarker = updateMapMarker(originMap, originMarker, locations[val]);
                }
            }
        });

        // Handle destination dropdown changes
        $("#DestinationId").on("change", function () {
            const val = $(this).val();

            if (val === "custom") {
                // Make the map visible
                $("#destinationMap").css({ visibility: "visible", height: "300px" });

                // Ensure map is properly sized
                if (destinationMapInitialized) {
                    setTimeout(() => destinationMap.invalidateSize(), 100);
                }

                // Remove any previous click listener
                if (destinationClickListener) {
                    destinationMap.off('click', destinationClickListener);
                }

                // Add a new click listener
                destinationClickListener = function(e) {
                    const latlng = e.latlng;
                    if (destinationMarker) destinationMap.removeLayer(destinationMarker);
                    destinationMarker = L.marker(latlng).addTo(destinationMap).bindPopup("Destinacioni i zgjedhur").openPopup();
                    customDestinationCoords = latlng; // Store the coordinates
                };

                destinationMap.on("click", destinationClickListener);
            } else {
                $("#destinationMap").css({ visibility: "hidden", height: "0" });
                customDestinationCoords = null; // Reset custom destination coordinates

                // Remove click event listener if exists
                if (destinationClickListener) {
                    destinationMap.off('click', destinationClickListener);
                    destinationClickListener = null;
                }

                if (locations[val]) {
                    destinationMarker = updateMapMarker(destinationMap, destinationMarker, locations[val]);
                }
            }
        });

        // Theme Toggle Functionality
        $("#themeToggle").on("click", function() {
            const currentTheme = $("html").attr("data-bs-theme") || "light";
            const newTheme = currentTheme === "light" ? "dark" : "light";

            $("html").attr("data-bs-theme", newTheme);

            if (newTheme === "dark") {
                $("#moonIcon").addClass("d-none");
                $("#sunIcon").removeClass("d-none");
            } else {
                $("#sunIcon").addClass("d-none");
                $("#moonIcon").removeClass("d-none");
            }

            // Reinitialize maps to ensure they render correctly with the new theme
            if (originMapInitialized) originMap.invalidateSize();
            if (destinationMapInitialized) destinationMap.invalidateSize();
        });

        // Validate and calculate transport costs
        function calculateTransport(e) {
            e.preventDefault();

            const originId = $("#OriginId").val();
            const destinationId = $("#DestinationId").val();
            const transportType = $("input[name='TransportType']:checked").val();
            const validationSummary = $("#validation-summary").addClass("d-none").empty();

            // Validate required fields
            if (!originId || !destinationId || !transportType) {
                validationSummary.removeClass("d-none").text("Ju lutemi plotësoni të gjitha fushat.");
                return false;
            }

            let origin, destination;

            // Prepare origin data
            if (originId === "custom" && customOriginCoords) {
                origin = {
                    Latitude: customOriginCoords.lat,
                    Longitude: customOriginCoords.lng,
                    Name: "Vendndodhje e personalizuar"
                };
            } else if (locations[originId]) {
                origin = locations[originId];
            } else {
                validationSummary.removeClass("d-none").text("Ju lutemi zgjidhni një vendndodhje fillestare ose klikoni në hartë.");
                return false;
            }

            // Prepare destination data
            if (destinationId === "custom" && customDestinationCoords) {
                destination = {
                    Latitude: customDestinationCoords.lat,
                    Longitude: customDestinationCoords.lng,
                    Name: "Vendndodhje e personalizuar"
                };
            } else if (locations[destinationId]) {
                destination = locations[destinationId];
            } else {
                validationSummary.removeClass("d-none").text("Ju lutemi zgjidhni një vendndodhje mbërritjeje ose klikoni në hartë.");
                return false;
            }

            // Ensure origin and destination are not the same
            if (
                (origin.Latitude === destination.Latitude && origin.Longitude === destination.Longitude) // Same coordinates
            ) {
                validationSummary.removeClass("d-none").text("Origjina dhe destinacioni nuk mund të jenë të njëjta.");
                return false;
            }

            // Make API call
            fetch("/Route/GetRoute", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    OriginLatitude: origin.Latitude,
                    OriginLongitude: origin.Longitude,
                    DestinationLatitude: destination.Latitude,
                    DestinationLongitude: destination.Longitude
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`API returned status ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                if (!data || !data.routes || !data.routes[0]) {
                    validationSummary.removeClass("d-none").text("Nuk ka të dhëna për këtë rrugë.");
                    return;
                }

                const route = data.routes[0];
                if (!route.summary || route.summary.distance == null || route.summary.duration == null) {
                    validationSummary.removeClass("d-none").text("Struktura e të dhënave nga API nuk është e vlefshme.");
                    return;
                }

                const distanceKm = route.summary.distance / 1000;
                const durationSec = route.summary.duration;

                let baseCost = 0, costPerKm = 0;
                switch (transportType) {
                    case "Taxi": baseCost = 300; costPerKm = 15; break;
                    case "Rental": baseCost = 5000; costPerKm = 10; break;
                    case "Bus": baseCost = 100; costPerKm = 3.3; break;
                    default:
                        validationSummary.removeClass("d-none").text("Lloji i transportit nuk është i vlefshëm.");
                        return;
                }

                const totalCost = baseCost + (costPerKm * distanceKm);
                const durationFormatted = durationSec >= 3600
                    ? `${Math.floor(durationSec / 3600)} orë ${Math.round((durationSec % 3600) / 60)} min`
                    : `${Math.round(durationSec / 60)} min`;

                $("#results-container").html(`
                    <div class="row">
                        <div class="col-md-6 mb-3"><h5>Pikënisja:</h5><p>${originId === "custom" ? "E zgjedhur në hartë" : origin.Name}</p></div>
                        <div class="col-md-6 mb-3"><h5>Destinacioni:</h5><p>${destinationId === "custom" ? "E zgjedhur në hartë" : destination.Name}</p></div>
                        <div class="col-md-6 mb-3"><h5>Distanca:</h5><p>${distanceKm.toFixed(2)} km</p></div>
                        <div class="col-md-6 mb-3"><h5>Kohëzgjatja:</h5><p>${durationFormatted}</p></div>
                        <div class="col-md-12"><h4>Kostoja Totale:</h4><p class="fs-3 fw-bold">${totalCost.toLocaleString()} LEK</p></div>
                    </div>
                `);
            })
            .catch(error => {
                console.error("Gabim API:", error);
                validationSummary.removeClass("d-none").text("Gabim gjatë marrjes së të dhënave nga API.");
            });

            return false;
        }

        $(document).ready(function () {
            initMaps();
        });
    </script>
}
